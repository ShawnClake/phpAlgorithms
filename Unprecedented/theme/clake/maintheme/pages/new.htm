name: How's life
route: test/new
md: true
layout: layouts.main.htm
===
#Test
I don't like the way you treated me
##Yup

# Chrome Dev Summit 2016 notes

## ServiceWorker live code example

```js
// main file
if('serviceWorker' in navigator){
    navigator.serviceWorker.register('./sw.js', { scope: '/' });
}
```

### ./sw.js

#### STEP 1
```js
/* a useless serviceworker */

// service workers compared and only keeps if byte equivalent
// changing version breaks byte equivalence and forces update
const VERSION = '1.0.0';

// Do not wait for sw shutdown, take over immediately
self.oninstall = event => event.waitUntil(self.skipWainting);
// Claim all clients! (take over all open tabs)
self.onactivate = event => event.waitUntil(self.clients.claim());
// Always use network
self.onfetch = event => event.respondWith(fetch(event.request));
// Will display double network requests, one to the sw and the fetch from sw

```

#### STEP 2
```js
/* make it a little useful */

// define assets that should be cached offline
const ASSETS = [
    '/static/app.js',
    '/static/router.js',
    '/static/views.js',
    '/static/styles.css',
    '/static/images/spinner.png'
];

// update install to wait for caches (to download all assets)
self.oninstall = event => event.waitUntil(async function () {
    const cache = await caches.open('static');
    await cache.addAll(ASSETS);
    return self.skipWainting();
}());
// check assets availabel under devTools 'Application'->Cache Storage

// update
self.onfetch = event => {
    // parse url to object for easier usage below
    event.parsedUrl = new Url(event.request.url);
    // check url for statics (cached assets)
    if(event.parsedUrl.pathName.startsWith('/static/')){
        event.respondWith(caches.match(event.request));
        return;
    }
    // use a stale cache strategy 
    staleWhileRevalidate(event);
};

function staleWhileRevalidate(event){
    const fetchedVersion = fetch(event.request);
    // clone fetched version and clone response
    // fetch is a stream and you can only consume it once
    const fetchedCopy = fetchedVersion.then(response => response.clone());
    const cachedVersion = caches.match(event.request);
    
    // event.respondWith(); => respond with value or promise of value (request object)
    // event.waitUntil() => if you want to do more work and avoid sw spin down

    event.respondWith(async function(){
        try {
            // race cache against network
            // catch network error and default to cache
            const response = await Promise.race([
                fetchedVersion.catch(_ => cachedVersion),
                cachedVersion
            ]);
            // response will be null if not in cache, so return fetchedVersion
            if(!response){
                return fetchedVersion;
            }
            return response;
        } catch (_) { // catch all evt errors and return 404
            return new Response(null, { status: 404 });
        }
    }());
    // add fetched version to cache
    event.waitUntil(async function(){
        // catch error thrown if offline
        try {
            // use fetchedCopy here instead of fetchedVersion
            // since stream can only be consumed once
            const response = await fetchedCopy;
            const cache = await caches.open('dynamic');
            return cache.put(event.request, response);
        } catch (_) { /* eat errors */ } 
    }());
}
```

#### STEP 3
```js
/* solve templating in service worker */

// add partials to cached assets
// + for using templating language that have multiple language bindings (i.e. c# & js)
ASSETS = ASSETS.concat([
    '/header.partial.html',
    '/footer.partial.html'
]);

// regex out what we want
const topLevelSection = /([^/]*)(\/|\/index.html)$/;

// update onfetch 
self.onfetch = event => {
    // parse url to object for easier usage below
    event.parsedUrl = new Url(event.request.url);

    if(topLevelSection.test(event.parsedUrl.pathName)){

        return buildSite(event);

    } else if (event.parsedUrl.pathName.startsWith('/static/')){
        // same as above
        event.respondWith(caches.match(event.request));
        return;
    }
    // use a stale cache strategy 
    staleWhileRevalidate(event);
};

function buildSite(event){
    // set partial to url to remember
    event.parsedUrl.searchParams.set('partial', '');
    // create an own wait until to use for wrapper
    let myWaitUntil;
    event.waitUntil(new Promise(resolve => {
        myWaitUntil = resolve
    }));
    // wait for all partials and assets
    event.response(async function(){
        const files = await Promise.all([
            caches.match('/header.partial.html'),
            staleWhileRevalidateWrapper(event.parsedUrl.toString(), myWaitUntil),
            caches.match('/footer.partial.html')
        ]);
        // get contents of all responses
        const contents = await Promise.all(files.map(f => f.text()));
        const content = contents.join('');
        // return all and be specific about content type (defaults to plain/text)
        return new Response(content, { headers: { 'Content-Type': 'text/html' }});

    }());
}
// create wrapper for stale that returns promise
function staleWhileRevalidateWrapper(request, waitUntil){
    // return promise and call staleWhileRevalidate with a special event
    return new Promise(resolve => {
        staleWhileRevalidate({
            request,
            respondWith: resolve,
            waitUntil
        });
    })
}
```

#### STEP 4
```js
// include templating library in top of sw.js
importScripts('/node_modules/dot/doT.main.js');
doT.templateSettings.strip = false;
// and these two lines inside buildSite
const template = doT.template(content);
// swap content for template(event.request) in Reponse
```

## SAM SACCONE on PRPL

### 1. Link rel preload (decalrative fetch directive)
i.e. `<link rel="preload" href="src/shop-image.png">`
allows browser to fetch all things at once and not wait for first dependency, then resolve more dependencies the download, then resolve, the download more.

- Good for moving the start download time of an asset closer to the initial request

### 2. H2 Push
H2Push - tell server to push assets related with request
Not cache aware so needs to be combined with SW.
Lacks resource prioritization (something the browser does)

- Good for cutting out a full roundtrip **if you have SW support**

### 3. Getting to interactive
JS execution and parse
JS delivery stats => 113kb nov 2010, 408kb oct 2016

=> V8 internal metrics
in dev tools in canary (see actual parse time per script)
Mentions - Webpack bundle analyzer

Ship less code to parse!

**Not parsed!**  
`<script type="inert" src="" />`

**Automatic code splitting**

 - Angular Lazy module loading
 - Polymer CLI per route fragments / sharding
 - Webpack aggressive splitting `plugin.require.ensure()`

#### PRPL pattern

the PRPL pattern stands for:

Push critical resources for the initial route.
Render initial route.
Pre-cache remaining routes.
Lazy-load and create remaining routes on demand.



## ADDY OSMANI - Production PWA's with frameworks

Use code splitting

Webpack1:
```js
require.ensure([], () => {
    require('./UserProfile', (module) => {
        // do stuff with module
    })
})
```
Webpack2:
```js
System.import('./UserProfile')
    .then(loadRoute(cb))
    .catch(errorLoading)
```

Use LIGHTHOUSE / PageSpeedInsights

jpeg optmizations från gfx.nrk.no ???
Page speed insights pratar om 90% førbættring på en del bilder...

PREACT 3kb alternative with same ES6 api  
Use alias in Webpack
```js
{
    resolve: {
        alias: {
            'react': 'preact-compat',
            'react-dom': 'preact-compat'
        }
    }
}
```

USE sw-precache wp plugin  
```js
plugins: [
    new SWPrecacheWebpackPlugin({
        cacheId: 'my-app',
        filename: 'sw.js',
        staticFileGlobs: [
            'app/**.html',
            'app/css/**.css',
            'app/js/**.js',
            'app/images/**.*'
        ],
        verbose: true
    })
]
```

## SW PRECACHE & SW TOOLBOX

# Chrome Dev Summit 2016 notes

## ServiceWorker live code example

```js
// main file
if('serviceWorker' in navigator){
    navigator.serviceWorker.register('./sw.js', { scope: '/' });
}
```

### ./sw.js

#### STEP 1
```js
/* a useless serviceworker */

// service workers compared and only keeps if byte equivalent
// changing version breaks byte equivalence and forces update
const VERSION = '1.0.0';

// Do not wait for sw shutdown, take over immediately
self.oninstall = event => event.waitUntil(self.skipWainting);
// Claim all clients! (take over all open tabs)
self.onactivate = event => event.waitUntil(self.clients.claim());
// Always use network
self.onfetch = event => event.respondWith(fetch(event.request));
// Will display double network requests, one to the sw and the fetch from sw

```

#### STEP 2
```js
/* make it a little useful */

// define assets that should be cached offline
const ASSETS = [
    '/static/app.js',
    '/static/router.js',
    '/static/views.js',
    '/static/styles.css',
    '/static/images/spinner.png'
];

// update install to wait for caches (to download all assets)
self.oninstall = event => event.waitUntil(async function () {
    const cache = await caches.open('static');
    await cache.addAll(ASSETS);
    return self.skipWainting();
}());
// check assets availabel under devTools 'Application'->Cache Storage

// update
self.onfetch = event => {
    // parse url to object for easier usage below
    event.parsedUrl = new Url(event.request.url);
    // check url for statics (cached assets)
    if(event.parsedUrl.pathName.startsWith('/static/')){
        event.respondWith(caches.match(event.request));
        return;
    }
    // use a stale cache strategy 
    staleWhileRevalidate(event);
};

function staleWhileRevalidate(event){
    const fetchedVersion = fetch(event.request);
    // clone fetched version and clone response
    // fetch is a stream and you can only consume it once
    const fetchedCopy = fetchedVersion.then(response => response.clone());
    const cachedVersion = caches.match(event.request);
    
    // event.respondWith(); => respond with value or promise of value (request object)
    // event.waitUntil() => if you want to do more work and avoid sw spin down

    event.respondWith(async function(){
        try {
            // race cache against network
            // catch network error and default to cache
            const response = await Promise.race([
                fetchedVersion.catch(_ => cachedVersion),
                cachedVersion
            ]);
            // response will be null if not in cache, so return fetchedVersion
            if(!response){
                return fetchedVersion;
            }
            return response;
        } catch (_) { // catch all evt errors and return 404
            return new Response(null, { status: 404 });
        }
    }());
    // add fetched version to cache
    event.waitUntil(async function(){
        // catch error thrown if offline
        try {
            // use fetchedCopy here instead of fetchedVersion
            // since stream can only be consumed once
            const response = await fetchedCopy;
            const cache = await caches.open('dynamic');
            return cache.put(event.request, response);
        } catch (_) { /* eat errors */ } 
    }());
}
```

#### STEP 3
```js
/* solve templating in service worker */

// add partials to cached assets
// + for using templating language that have multiple language bindings (i.e. c# & js)
ASSETS = ASSETS.concat([
    '/header.partial.html',
    '/footer.partial.html'
]);

// regex out what we want
const topLevelSection = /([^/]*)(\/|\/index.html)$/;

// update onfetch 
self.onfetch = event => {
    // parse url to object for easier usage below
    event.parsedUrl = new Url(event.request.url);

    if(topLevelSection.test(event.parsedUrl.pathName)){

        return buildSite(event);

    } else if (event.parsedUrl.pathName.startsWith('/static/')){
        // same as above
        event.respondWith(caches.match(event.request));
        return;
    }
    // use a stale cache strategy 
    staleWhileRevalidate(event);
};

function buildSite(event){
    // set partial to url to remember
    event.parsedUrl.searchParams.set('partial', '');
    // create an own wait until to use for wrapper
    let myWaitUntil;
    event.waitUntil(new Promise(resolve => {
        myWaitUntil = resolve
    }));
    // wait for all partials and assets
    event.response(async function(){
        const files = await Promise.all([
            caches.match('/header.partial.html'),
            staleWhileRevalidateWrapper(event.parsedUrl.toString(), myWaitUntil),
            caches.match('/footer.partial.html')
        ]);
        // get contents of all responses
        const contents = await Promise.all(files.map(f => f.text()));
        const content = contents.join('');
        // return all and be specific about content type (defaults to plain/text)
        return new Response(content, { headers: { 'Content-Type': 'text/html' }});

    }());
}
// create wrapper for stale that returns promise
function staleWhileRevalidateWrapper(request, waitUntil){
    // return promise and call staleWhileRevalidate with a special event
    return new Promise(resolve => {
        staleWhileRevalidate({
            request,
            respondWith: resolve,
            waitUntil
        });
    })
}
```

#### STEP 4
```js
// include templating library in top of sw.js
importScripts('/node_modules/dot/doT.main.js');
doT.templateSettings.strip = false;
// and these two lines inside buildSite
const template = doT.template(content);
// swap content for template(event.request) in Reponse
```

## SAM SACCONE on PRPL

### 1. Link rel preload (decalrative fetch directive)
i.e. `<link rel="preload" href="src/shop-image.png">`
allows browser to fetch all things at once and not wait for first dependency, then resolve more dependencies the download, then resolve, the download more.

- Good for moving the start download time of an asset closer to the initial request

### 2. H2 Push
H2Push - tell server to push assets related with request
Not cache aware so needs to be combined with SW.
Lacks resource prioritization (something the browser does)

- Good for cutting out a full roundtrip **if you have SW support**

### 3. Getting to interactive
JS execution and parse
JS delivery stats => 113kb nov 2010, 408kb oct 2016

=> V8 internal metrics
in dev tools in canary (see actual parse time per script)
Mentions - Webpack bundle analyzer

Ship less code to parse!

**Not parsed!**  
`<script type="inert" src="" />`

**Automatic code splitting**

 - Angular Lazy module loading
 - Polymer CLI per route fragments / sharding
 - Webpack aggressive splitting `plugin.require.ensure()`

#### PRPL pattern

the PRPL pattern stands for:

Push critical resources for the initial route.
Render initial route.
Pre-cache remaining routes.
Lazy-load and create remaining routes on demand.



## ADDY OSMANI - Production PWA's with frameworks

Use code splitting

Webpack1:
```js
require.ensure([], () => {
    require('./UserProfile', (module) => {
        // do stuff with module
    })
})
```
Webpack2:
```js
System.import('./UserProfile')
    .then(loadRoute(cb))
    .catch(errorLoading)
```

Use LIGHTHOUSE / PageSpeedInsights

jpeg optmizations från gfx.nrk.no ???
Page speed insights pratar om 90% førbættring på en del bilder...

PREACT 3kb alternative with same ES6 api  
Use alias in Webpack
```js
{
    resolve: {
        alias: {
            'react': 'preact-compat',
            'react-dom': 'preact-compat'
        }
    }
}
```